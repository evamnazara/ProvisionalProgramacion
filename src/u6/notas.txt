CLASES ESTATICAS: 
    se usan las clases estaticas si van en un fichero con un main 
    check en los constructores, a la hora de declarar listas q se haga como Collecion, o la llamada en el  constructor puede no funcionar
    el error de la no enclosing instance of type Futbol is accessible. Must qualify the allocation with an enclosing instance of type Futbol, es porque no hay static en la clase 

diferencias entre map set list hash 
    heredados de (Collection<E>)
        List<E> -> ArrayList PERMITE  
        Set<E> -> TreeSet y HashSet NO PERMITE 
            HashSet no tienen un orden especifico + permite nulos
            TreeSet ordenados con compare + no permite nulos
                en clase propia hay q implementar comparable

______
Un set no se puede recorrer como una lista ( lista.get(3)). Hay q usar un iterator

como se hace un mapa
expresiones lamda

METODOS: 

interfaz Collection:
    boolean add(E e)
    boolean remove(Object o)
    void clear()
    int size()
    boolean isEmpty()
    boolean contains(Object o)
    String toString()
    Iterator<E> iterator()
        boolean hasNext()
        E next()
        default void remove()

CHULETA DE MÉTODOS DE LA CLASE COLLECTIONS (java.util.Collections)

Collections.sort(List<T> lista) -> Ordena la lista según el orden natural de los elementos (requiere que implementen Comparable).

Collections.sort(List<T> lista, Comparator<T> c)  -> Ordena la lista usando un comparador personalizado.

Collections.shuffle(List<?> lista) -> Desordena aleatoriamente los elementos de la lista.

Collections.reverse(List<?> lista) -> Invierte el orden de los elementos de la lista.

Collections.max(Collection<T> col) -> Devuelve el valor máximo de la colección según el orden natural.

Collections.min(Collection<T> col) -> Devuelve el valor mínimo de la colección.

Collections.frequency(Collection<?> col, Object o) -> Cuenta cuántas veces aparece un objeto en la colección.

Collections.singletonList(T o) -> Crea una lista inmutable que contiene solo ese elemento.

Collections.emptyList()  -> Devuelve una lista vacía e inmutable.

Collections.fill(List<? super T> lista, T valor) -> Rellena toda la lista con el mismo valor.

Collections.copy(List<? super T> dest, List<? extends T> src)  -> Copia los elementos de la lista fuente (src) a la lista destino (dest).

Collections.replaceAll(List<T> lista, T antiguo, T nuevo)  -> Reemplaza todas las apariciones de un valor por otro en la lista.

___________________


MÉTODOS DE MAPA: (interfaz Map<K,V>):
    V put(K key, V value)
    V remove(Object key)
    void clear()
    V get(Object key)
    boolean containsKey(Object key)
    boolean containsValue(Object value)

    Vistas de claves, valores y entradas:
    Set<K> keySet()
    Collection<V> values()
    Set<Map.Entry<K,V>> entrySet()

    * Podemos iterar sobre las vistas para eliminar entradas del mapa con el método remove() del iterador.

    Método de la interfaz Map.Entry<K,V>:
    K getKey()
    V getValue()
    V setValue(V value)

    Imprimir  un mapa: 

    static void mostrar(Map<Integer, Jugador> plantilla) {
                for (Map.Entry<Integer, Jugador> entry : plantilla.entrySet()) {
                    System.out.println(entry.getKey() + " - " + entry.getValue());
                }
            }

_____________



QUITAR REPETIDOS: ej ejericio 1205 
    pasar de una lista aleatoria con un hashset 

CAMBIAR DE UN METODO A OTRO:
    Set<Integer> numEnteros = new LinkedHashSet<>();
        numEnteros.add(4); 5, 2,4,8,3...
    sout(numEnteros) [5, 2, 4, 8, 3]

    //si quisieramos ordenarlos : 
    Set<Integer> numEnterosOrdenados = new TreeSet<>();
        numEnterosOrdenados.AddAll(numEnteros);
            //-> a partir de aquí, se puede mantener ordenada al insertar y eliminar
    sout(numEnterosOrdenados) [2, 3, 4, 5, 8] 

TAMBIEN: Set<Integer> numEnterosOrdenados = new TreeSet<>(numEnteros);
