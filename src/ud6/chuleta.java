package ud6;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

public class chuleta {
    public static <T> void main(String[] args) {
        // comparator y comparable

        /*
         * implementar la interfaz comparable y hacer el metodo compareTo de esta forma
         * public int compareTo(Jugador jugador) {
         * return this.getNombre().compareTo(jugador.getNombre()) ;
         * }
         * donde esta bastante bien explicao matate
         * 
         * si son numeros lo que quieres comparar se restan
         * public int compareTo(Jugador jugador) {
         * return (int) (this.getEstatura() - jugador.getEstatura()) ;
         * }
         * asi chavalote despues del comparable hay que poner el <nombredelObjeto>
         */

        // listas

        /// creacion
        /// array variable
        /*
         * boolean add(E e) a√±adir cosas a la lista
         * boolean remove(Object o) quitar cosas de la lista
         * void clear() limpiar la lista
         * int size() .lenght xddd weon
         * boolean isEmpty() mira si esta vacio
         * boolean contains(Object o) mira si lo tiene dentro
         * String toString() llama al tostring de cada uno de los objetos
         * 
         * 
         * 
         * 
         * 
         * 
         * 
         * 
         * CHULETA DE LA INTERFAZ ITERATOR (java.util.Iterator)
         * 
         * ¬øQU√â ES?
         * -> Iterator es una interfaz que permite recorrer colecciones (List, Set,
         * etc.) de forma secuencial y segura.
         * 
         * M√âTODOS PRINCIPALES:
         * 
         * boolean hasNext()
         * -> Devuelve true si hay m√°s elementos por iterar.
         * 
         * T next()
         * -> Devuelve el siguiente elemento de la colecci√≥n y avanza el iterador.
         * 
         * void remove()
         * -> Elimina el √∫ltimo elemento devuelto por next().
         * (¬°Debe llamarse despu√©s de next(), si no lanza excepci√≥n!)
         * 
         * ¬øC√ìMO SE USA?
         * Iterator<T> it = coleccion.iterator();
         * while (it.hasNext()) {
         * T elemento = it.next();
         * // Usar elemento
         * }
         * 
         * NOTAS:
         * No se puede modificar la colecci√≥n directamente mientras se itera con
         * Iterator.
         * Se recomienda usar remove() del Iterator en vez de coleccion.remove().
         * 
         * 
         * 
         * 
         * 
         * 
         * 
         * 
         */

        List<T> Lista = new ArrayList<>();

        // set lista sin repeticiones

        Set<T> set = new HashSet<>();
        Set<T> set2 = new TreeSet<>();

        // Mapas
        // Lista de cosas con key

        Map<Integer, T> mapa = new HashMap<>();
        Map<Integer, T> mapa2 = new TreeMap();

        /*
         * M√âTODOS PRINCIPALES:
         * 
         * V put(K key, V value)
         * ‚Üí Inserta o reemplaza el valor asociado a la clave.
         * ‚Üí Devuelve el valor anterior o null si no exist√≠a.
         * 
         * V remove(Object key)
         * ‚Üí Elimina la entrada con la clave dada.
         * ‚Üí Devuelve el valor eliminado o null si no estaba.
         * 
         * void clear()
         * ‚Üí Elimina todas las entradas del mapa.
         * 
         * V get(Object key)
         * ‚Üí Devuelve el valor asociado a la clave.
         * ‚Üí Si la clave no existe, devuelve null.
         * 
         * boolean containsKey(Object key)
         * ‚Üí Devuelve true si la clave est√° en el mapa.
         * 
         * boolean containsValue(Object value)
         * ‚Üí Devuelve true si el valor existe en el mapa.
         * 
         * VISTAS DEL MAPA:
         * 
         * Set<K> keySet()
         * ‚Üí Conjunto con todas las claves del mapa.
         * 
         * Collection<V> values()
         * ‚Üí Colecci√≥n con todos los valores del mapa.
         * 
         * Set<Map.Entry<K,V>> entrySet()
         * ‚Üí Conjunto de objetos Map.Entry<K,V>, cada uno contiene una clave y su valor
         * asociado.
         * 
         */

        /*
         * 3Ô∏è‚É£ Contar frecuencias
         * java
         * Copiar
         * Editar
         * frecuencias.put(elemento, frecuencias.getOrDefault(elemento, 0) + 1);
         * Aqu√≠ usamos un truco muy √∫til de Map:
         * 
         * frecuencias.getOrDefault(elemento, 0):
         * 
         * Si el elemento ya est√° en el mapa, devuelve su valor actual.
         * 
         * Si no est√°, devuelve 0 (por defecto).
         * 
         * Luego le sumamos 1 y lo volvemos a poner en el mapa.
         * 
         * üìå Ejemplo:
         * Sup√≥n que el elemento es 'a'.
         * 
         * Primera vez: no est√° ‚Üí getOrDefault('a', 0) devuelve 0 ‚Üí suma 1 ‚Üí
         * frecuencias.put('a', 1)
         * 
         * Segunda vez: getOrDefault('a', 0) devuelve 1 ‚Üí suma 1 ‚Üí frecuencias.put('a',
         * 2)
         * 
         * Y as√≠ sucesivamente...
         */

        /*
         * clase collections explicada
         * 
         * 
         * | M√©todo | Descrici√≥n |
         * |--------|------------|
         * | Collections.sort(List<T> lista) | Ordena a lista segundo a orde natural dos
         * elementos (debe implementar Comparable). |
         * 
         * | Collections.sort(List<T> lista, Comparator<T> c) | Ordena a lista segundo
         * un comparador personalizado. |
         * 
         * | Collections.shuffle(List<?> lista) | Desordena os elementos da lista de
         * forma aleatoria. |
         * 
         * | Collections.reverse(List<?> lista) | Invierte a orde dos elementos da
         * lista. |
         * 
         * | Collections.max(Collection<T> col) | Devolve o elemento m√°ximo segundo a
         * orde natural. |
         * 
         * | Collections.min(Collection<T> col) | Devolve o elemento m√≠nimo. |
         * 
         * | Collections.frequency(Collection<?> col, Object o) | Conta cantas veces
         * aparece un obxecto na colecci√≥n. |
         * 
         * | Collections.emptyList() | Crea unha lista baleira e inmutable. |
         * 
         * | Collections.fill(List<? super T> lista, T valor) | Enche toda a lista co
         * mesmo valor. |
         * 
         * | Collections.copy(List<? super T> dest, List<? extends T> src) | Copia os
         * elementos da lista src na lista dest. |
         * 
         * | Collections.replaceAll(List<T> lista, T antigo, T novo) | Substit√∫e todas
         * as aparici√≥ns dun valor por outro. |
         * 
         * 
         */

    }

}